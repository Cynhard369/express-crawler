/* eslint-disable max-len */
/* eslint-disable no-plusplus */
/* eslint-disable no-unused-vars */
/* eslint-disable no-loop-func */
/* eslint-disable linebreak-style */
const path = require('path');
const Crawler = require('crawler');

global.appRoot = path.resolve(__dirname);

const provincePageMap = {};
const result = [];
const { EventEmitter } = require('events');

const event = new EventEmitter();

// Get a map for recording the page number of each province.
const localUri = [];
for (let i = 1; i < 33; i++) {
  localUri.push(`http://kaoshi.edu.sina.com.cn/college/scorelist?tab=file&wl=&local=${i}`);
}

const c = new Crawler({
  maxConnections: 40,
  callback(error, res, done) {
    if (error) {
      console.log(error);
    } else {
      const { $ } = res;
      const pageDom = $('.pageNumWrap');
      const content = pageDom.attr();
      const page = parseInt(content.totalpage, 10);
      let cityNo;
      if (res.request.uri.query.indexOf('local=') >= 0) {
        const cityNoArr = res.request.uri.query.split('local=');
        // eslint-disable-next-line prefer-destructuring
        cityNo = parseInt(cityNoArr[1], 10);
      }
      provincePageMap[cityNo] = page;
    }
    done();
  },
});

c.queue(localUri);

// Get the length of the provincePageMap
const keyArr = Object.keys(provincePageMap);
// Use a loop to get data of each province.
const dataCrawler = new Crawler({
  maxConnections: 10,
  callback(error, res, done) {
    if (error) {
      console.log(error);
    } else {
      const { $ } = res;
      $('#score > div.tabsContainer > table > tbody > tr').each((i, v) => {
        // Filtering the head of table
        if (i > 0) {
          const record = [];
          const tds = $(v).find('td');
          tds.each((ii, vv) => {
            if (ii < 6) {
              record.push($(vv).text());
            }
          });
          result.push(record);
        }
      });
    }
    done();
  },
});
dataCrawler.on('drain', () => {
  console.log(result);
});
for (let j = 1; j <= keyArr.length; j++) {
  // Divide the different pages' url into a queue
  for (let queueNumber = 0; queueNumber < Math.ceil(provincePageMap[j] / 10); queueNumber++) {
    const Urls = [];
    for (let l = queueNumber * 10 + 1; l <= (queueNumber + 1) * 10 && l <= provincePageMap[j]; l++) {
      Urls.push(`http://kaoshi.edu.sina.com.cn/college/scorelist?tab=file&wl=&local=${1}&page=${l}`);
    }
    dataCrawler.queue(Urls);
  }
}
